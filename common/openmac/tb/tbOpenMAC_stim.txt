#openMAC TX frame manually
#read 16bit: RDw 00000000
#write 16bit: WRw 00000000 1234
#read 8bit: RDb 00000000
#write 8bit: WRb 00000000 XX34
#
#jumpe equal: JEw 00000000 1234
#
#nop: NP

# read phy reset
RDw 00001004
#deactivate phy reset
WRw 00001004 0080
# read from phy
#WRw 00001000 6000
#JEw 00001000 0080


#set TX0
# 62 byte
WRw 00000D02 003E
# pointer = ABCDEF00
WRw 00000D04 EF00
WRw 00000D06 ABCD
# time = 0x00000030
WRw 00000D08 0050
WRw 00000D0A 0000
# start time + owner + no retry
WRw 00000D00 4101
# start time + owner + max retry
#WRw 00000D00 4100

#set TX control
# ie + half + run
WRw 00000002 A080

#set RX0
# 256 byte
WRw 00000C02 0100
# pointer = DEADBEEF
WRw 00000C04 BEEF
WRw 00000C06 DEAD
# owner + last
WRb 00000C01 0300

# filter0: TxEn+On+#2
#WRb 0000083E 00C2

# filter0: On
WRb 0000083E 0040

#set TX2 for auto-response
# 100 byte
WRw 00000D22 0064
# pointer = 0C0FFEE0
WRw 00000D24 FEE0
WRw 00000D26 0C0F
# owner + no retry
WRw 00000D20 0100

#set RX control
# ie + run
WRw 0000000A 8080

#set TX1
# 60 byte
WRw 00000D12 003C
# pointer = 12345600
WRw 00000D14 5600
WRw 00000D16 1234
# time high
WRw 00000D1A 0000
##################################################
# time low

# time = 0x00000170 (TX - short - TX/RX => collision!)
WRw 00000D18 0170

# time = 0x0000018E (RX/TX => collision!)
WRw 00000D18 018E

# time = 0x00000283 (RX/TX => collision!)
#WRw 00000D18 0283

# time = 0x000002D0 (RX - short - TX => collision!)
#WRw 00000D18 02D0

# time = 0x000002DE (RX - IPG - TX)
WRw 00000D18 02DE

# time = 0x00000333 (RX - .... - TX)
#WRw 00000D18 0333
##################################################

# start time + owner + last + no retry
WRw 00000D10 4301
 
#read TX0
JEw 00000D00 0400
# ack TX IRQ
WRw 00000004 0100

#read TX1
JEw 00000D10 0400
# ack TX IRQ
WRw 00000004 0100
 
# #read RX0
# JEw 00000C00 0800
# # ack RX IRQ
# WRw 0000000C 0100
# 
# #read TX2
# JEw 00000D20 0400
# # ack TX IRQ
# WRw 00000004 0100
