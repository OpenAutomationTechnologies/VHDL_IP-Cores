#------------------------------------------------------------------------------------------------------------------------
#-- AXI MASTER TEST DEVICE Component (Microprocessor Peripheral Definition - MPD)
#--
#--       Copyright (C) 2011 B&R
#--
#--    Redistribution and use in source and binary forms, with or without
#--    modification, are permitted provided that the following conditions
#--    are met:
#--
#--    1. Redistributions of source code must retain the above copyright
#--       notice, this list of conditions and the following disclaimer.
#--
#--    2. Redistributions in binary form must reproduce the above copyright
#--       notice, this list of conditions and the following disclaimer in the
#--       documentation and/or other materials provided with the distribution.
#--
#--    3. Neither the name of B&R nor the names of its
#--       contributors may be used to endorse or promote products derived
#--       from this software without prior written permission. For written
#--       permission, please contact office@br-automation.com
#--
#--    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#--    "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#--    LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#--    FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#--    COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#--    INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#--    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#--    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#--    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#--    LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#--    ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#--    POSSIBILITY OF SUCH DAMAGE.
#--
#------------------------------------------------------------------------------------------------------------------------
#-- Version History
#------------------------------------------------------------------------------------------------------------------------
#-- 2012-02-13  V0.01   zelenkaj    initial creation
#-- 2012-02-21  V0.02   zelenkaj    added test_port
#------------------------------------------------------------------------------------------------------------------------

BEGIN axi_master_test_device

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = VHDL
OPTION DESC = AXI_MASTER_TEST_DEVICE
OPTION LONG_DESC = Master Test Device for AXI Interconnects
OPTION IP_GROUP = 'Verification'
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

## Bus Interfaces
### Master test port
BUS_INTERFACE BUS = M_AXI, BUS_STD = AXI, BUS_TYPE = MASTER
### Slave configuration board
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

### M_AXI
PARAMETER C_M_AXI_ADDR_WIDTH = 32, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_DATA_WIDTH = 32, DT = integer, BUS = M_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_M_AXI_NATIVE_DWIDTH = 32, DT = integer, RANGE = (32)
PARAMETER C_M_AXI_LENGTH_WIDTH = 12, DT = integer, RANGE = (12)
PARAMETER C_M_AXI_MAX_BURST_LEN = 16, DT = integer, RANGE = (16,32,64,128,256)
PARAMETER C_M_AXI_PROTOCOL = AXI4, DT = string, BUS = M_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### S_AXI
PARAMETER C_S_AXI_NUM_ADDR_RANGES = 2, DT = integer, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_RNG0_BASEADDR = 0xffffffff, DT = std_logic_vector, BUS = S_AXI, ADDRESS = BASE, PAIR = C_S_AXI_RNG0_HIGHADDR, MIN_SIZE = 0x30, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_RNG0_HIGHADDR = 0x00000000, DT = std_logic_vector, BUS = S_AXI, ADDRESS = HIGH, PAIR = C_S_AXI_RNG0_BASEADDR, ASSIGNMENT = REQUIRE
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = integer, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = integer, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_USE_WSTRB = 1, DT = integer, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_DPHASE_TIMEOUT = 0, DT = integer, RANGE = (0:512)
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, DT = string, BUS = S_AXI, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

### openMAC DMA
PORT m_axi_aclk = "", DIR = I, SIGIS = CLK, BUS = M_AXI
PORT m_axi_aresetn = ARESETN, DIR = I, SIGIS = RST, BUS = M_AXI
PORT md_error = "", DIR = O
PORT m_axi_arready = ARREADY, DIR = I, BUS = M_AXI
PORT m_axi_awready = AWREADY, DIR = I, BUS = M_AXI
PORT m_axi_bvalid = BVALID, DIR = I, BUS = M_AXI
PORT m_axi_rlast = RLAST, DIR = I, BUS = M_AXI
PORT m_axi_rvalid = RVALID, DIR = I, BUS = M_AXI
PORT m_axi_wready = WREADY, DIR = I, BUS = M_AXI
PORT m_axi_bresp = BRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_rdata = RDATA, DIR = I, VEC = [C_M_AXI_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_rresp = RRESP, DIR = I, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arvalid = ARVALID, DIR = O, BUS = M_AXI
PORT m_axi_awvalid = AWVALID, DIR = O, BUS = M_AXI
PORT m_axi_bready = BREADY, DIR = O, BUS = M_AXI
PORT m_axi_rready = RREADY, DIR = O, BUS = M_AXI
PORT m_axi_wlast = WLAST, DIR = O, BUS = M_AXI
PORT m_axi_wvalid = WVALID, DIR = O, BUS = M_AXI
PORT m_axi_araddr = ARADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arburst = ARBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arcache = ARCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arlen = ARLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arprot = ARPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_arsize = ARSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awaddr = AWADDR, DIR = O, VEC = [C_M_AXI_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awburst = AWBURST, DIR = O, VEC = [1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awcache = AWCACHE, DIR = O, VEC = [3:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awlen = AWLEN, DIR = O, VEC = [7:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awprot = AWPROT, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_awsize = AWSIZE, DIR = O, VEC = [2:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wdata = WDATA, DIR = O, VEC = [C_M_AXI_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = M_AXI
PORT m_axi_wstrb = WSTRB, DIR = O, VEC = [(C_M_AXI_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = M_AXI

### openMAC REG
PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [C_S_AXI_ADDR_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [C_S_AXI_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH/8)-1:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [C_S_AXI_DATA_WIDTH-1:0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI

### test port
PORT test_port = "", DIR = O, VEC = [127:0]

END


